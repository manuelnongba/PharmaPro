DATABASE_PASSWORD=100Godbless
DATABASE=mongodb+srv://manuelnongba:<PASSWORD>@cluster0.apgtxiu.mongodb.net/pharmacy?retryWrites=true&w=majority

JWT_SECRET=ibetyoucantguessmysecret-you-linkster
JWT_EXPIRES_IN=90d
JWT_COOKIE_EXPIRES_IN=90

# import React, { useState } from 'react';

# const LoginPage = () => {
#   // Declare a new state variable, which we'll call "formData"
#   const [formData, setFormData] = useState({
#     username: '',
#     password: ''
#   });

#   const handleInputChange = (event) => {
#     // Update the formData state with the new values from the input fields
#     setFormData({
#       ...formData,
#       [event.target.name]: event.target.value
#     });
#   };

#   const handleSubmit = (event) => {
#     // Prevent the default form submission behavior
#     event.preventDefault();

#     // TODO: Add code to submit the formData to a server or call an authentication function

#     // Clear the form fields after submission
#     setFormData({
#       username: '',
#       password: ''
#     });
#   };

#   return (
#     <form onSubmit={handleSubmit}>
#       <label>
#         Username:
#         <input
#           type="text"
#           name="username"
#           value={formData.username}
#           onChange={handleInputChange}
#         />
#       </label>
#       <label>
#         Password:
#         <input
#           type="password"
#           name="password"
#           value={formData.password}
#           onChange={handleInputChange}
#         />
#       </label>
#       <button type="submit">Login</button>
#     </form>
#   );
# };







# import React, { useState } from 'react';
# import { Redirect } from 'react-router-dom';

# const LoginPage = () => {
#   // Declare a new state variable, which we'll call "formData"
#   const [formData, setFormData] = useState({
#     username: '',
#     password: ''
#   });

#   // Declare a new state variable to store the authenticated user's role
#   const [userRole, setUserRole] = useState('');

#   const handleInputChange = (event) => {
#     // Update the formData state with the new values from the input fields
#     setFormData({
#       ...formData,
#       [event.target.name]: event.target.value
#     });
#   };

#   const handleSubmit = (event) => {
#     // Prevent the default form submission behavior
#     event.preventDefault();

#     // TODO: Add code to authenticate the user and set the userRole state variable
#     // For example:
#     // if (authenticate(formData.username, formData.password)) {
#     //   setUserRole(getUserRole(formData.username));
#     // }

#     // Clear the form fields after submission
#     setFormData({
#       username: '',
#       password: ''
#     });
#   };

#   // If the user has been authenticated, redirect them to the appropriate page
#   if (userRole === 'admin') {
#     return <Redirect to="/admin" />;
#   } else if (userRole === 'user') {
#     return <Redirect to="/user" />;
#   }

#   return (
#     <form onSubmit={handleSubmit}>
#       <label>
#         Username:
#         <input
#           type="text"
#           name="username"
#           value={formData.username}
#           onChange={handleInputChange}
#         />
#       </label>
#       <label>
#         Password:
#         <input
#           type="password"
#           name="password"
#           value={formData.password}
#           onChange={handleInputChange}
#         />
#       </label>
#       <button type="submit">Login</button>
#     </form>
#   );
# };
